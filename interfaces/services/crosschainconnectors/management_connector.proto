syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services/crosschainconnectors";

import "../primitives/protocol.proto";
import "../protocol/contracts.proto";
import "../protocol/results.proto";

option serialize_messages = false;

service ManagementConnector {
    // called by VirtualMachine
    rpc GetBlockInfoByTime (GetBlockInfoByTimeInput) returns (GetBlockInfoByTimeOutput);
    rpc CallContract (CallContractInput) returns (CallContractOutput);

}

message GetBlockInfoByTimeInput {
    primitives.timestamp_nano reference_timestamp = 1;
}

message GetBlockInfoByTimeOutput {
    protocol.CrossChainCallResult call_result = 1;
    primitives.block_height block_height = 2;
    primitives.timestamp_nano block_timestamp = 3;
}


message CallContractInput {
    primitives.block_height block_height = 1;
    primitives.contract_name contract_name = 2;
    primitives.method_name method_name = 3;
    primitives.packed_argument_array input_argument_array = 4;
}

message CallContractOutput {
    protocol.CrossChainCallResult call_result = 1;
    primitives.packed_argument_array output_argument_array = 2;
}
