syntax = "proto3";
package services;
option go_package = "github.com/orbs-network/orbs-spec/types/go/services";

import "primitives/protocol.proto";
import "protocol/contracts.proto";
import "protocol/results.proto";

option serialize_messages = false;

service CrosschainConnector {
    // called by VirtualMachine
    rpc EthereumCallContract (EthereumCallContractInput) returns (EthereumCallContractOutput);
    rpc EthereumGetTransactionLogs (EthereumGetTransactionLogsInput) returns (EthereumGetTransactionLogsOutput);
    rpc EthereumGetBlockNumber (EthereumGetBlockNumberInput) returns (EthereumGetBlockNumberOutput);
    rpc EthereumGetBlockTime (EthereumGetBlockTimeInput) returns (EthereumGetBlockTimeOutput);
    rpc EthereumGetBlockTimeByNumber (EthereumGetBlockTimeByNumberInput) returns (EthereumGetBlockTimeByNumberOutput);
    rpc EthereumGetBlockNumberByTime (EthereumGetBlockNumberByTimeInput) returns (EthereumGetBlockNumberByTimeOutput);

    // mgmt-chain
    rpc MgmtGetBlockInfoByTime (MgmtGetBlockInfoByTimeInput) returns (MgmtGetBlockInfoByTimeOutput);
    rpc MgmtCallContract (MgmtCallContractInput) returns (MgmtCallContractOutput);


    // other VCs
    // rpc CrossChainGetBlockInfoByTime (CrossChainGetBlockInfoByTimeInput) returns (CrossChainGetBlockInfoByTimeOutput);
    // rpc CrossChainCallContract (CrossChainCallContractInput) returns (CrossChainCallContractOutput);

}

message MgmtGetBlockInfoByTimeInput {
    primitives.timestamp_nano reference_timestamp = 1;
}

message MgmtGetBlockInfoByTimeOutput {
    primitives.block_height block_height = 1;
    primitives.timestamp_nano block_timestamp = 2;
}


message MgmtCallContractInput {
    primitives.block_height block_height = 1;
    primitives.contract_name contract_name = 2;
    primitives.method_name method_name = 3;
    primitives.packed_argument_array input_argument_array = 4;
}

message MgmtCallContractOutput {
    protocol.ExecutionResult execution_result = 1;
    primitives.packed_argument_array output_argument_array = 2;
}


// other VCs
//
//message CrossChainGetBlockInfoByTimeInput {
//    primitives.virtual_chain_id virtual_chain_id = 1;
//    primitives.timestamp_nano reference_timestamp = 1;
//}
//
//message CrossChainGetBlockInfoByTimeOutput {
//    primitives.block_height block_height = 1;
//    primitives.timestamp_nano block_timestamp = 2;
//}
//
//message CrossChainCallContractInput {
//    primitives.virtual_chain_id virtual_chain_id = 1;
//    primitives.block_height block_height = 2;
//    primitives.contract_name contract_name = 3;
//    primitives.method_name method_name = 4;
//    primitives.packed_argument_array input_argument_array = 5;
//}
//
//message CrossChainCallContractOutput {
//    protocol.ExecutionResult execution_result = 1;
//    primitives.packed_argument_array output_argument_array = 2;
//}
//





message EthereumCallContractInput {
    primitives.timestamp_nano reference_timestamp = 1;
    uint64 ethereum_block_number = 2; // 0 for recent
    string ethereum_contract_address = 3;
    string ethereum_function_name = 4;
    string ethereum_json_abi = 5;
    bytes ethereum_abi_packed_input_arguments = 6;
}

message EthereumCallContractOutput {
    bytes ethereum_abi_packed_output = 1;
}

message EthereumGetTransactionLogsInput {
    primitives.timestamp_nano reference_timestamp = 1;
    string ethereum_contract_address = 2;
    string ethereum_event_name = 3;
    string ethereum_json_abi = 4;
    string ethereum_txhash = 5;
}

message EthereumGetTransactionLogsOutput {
    repeated bytes ethereum_abi_packed_outputs = 1;
    uint64 ethereum_block_number = 2;
    uint32 ethereum_txindex = 3;
}

message EthereumGetBlockNumberInput {
    primitives.timestamp_nano reference_timestamp = 1;
}

message EthereumGetBlockNumberOutput {
    uint64 ethereum_block_number = 1;
}

message EthereumGetBlockTimeByNumberInput {
    primitives.timestamp_nano reference_timestamp = 1;
    uint64 ethereum_block_number = 2;
}

message EthereumGetBlockTimeByNumberOutput {
    primitives.timestamp_nano ethereum_timestamp = 1;
}

message EthereumGetBlockTimeInput {
    primitives.timestamp_nano reference_timestamp = 1;
}

message EthereumGetBlockTimeOutput {
    primitives.timestamp_nano ethereum_timestamp = 1;
}

message EthereumGetBlockNumberByTimeInput {
    primitives.timestamp_nano reference_timestamp = 1;
    primitives.timestamp_nano ethereum_timestamp = 2;
}

message EthereumGetBlockNumberByTimeOutput {
    uint64 ethereum_block_number = 1;
}