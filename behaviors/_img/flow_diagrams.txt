# 1. flows/send-transaction.md, Send transaction

participant GW ClientSDK
participant GW PublicAPI
participant GW TransactionPool
participant GW VirtualMachine
participant GW Gossip
participant Nodes Gossip
participant Nodes TransactionPool

GW ClientSDK->GW PublicAPI:SendTransaction
note over GW PublicAPI
    Performs basic transaction checks
    Maintains session info
end note
GW PublicAPI->GW TransactionPool:AddNewTransaction
note over GW TransactionPool
    Perfroms Transaction Checks
end note
GW TransactionPool->+GW VirtualMachine:TransactionSetPreOrder
note over GW VirtualMachine
    Verifies Signatures and calls
    PreOrder smart contract
end note
GW VirtualMachine-->-GW TransactionPool:valid
note over GW TransactionPool
    Adds to pending pool
    Batches transactions for gossip and signs
end note
GW TransactionPool->GW Gossip: Broadcast message
GW Gossip-->Nodes Gossip: Gossip message

Nodes Gossip->Nodes TransactionPool:MessageReceived
note over Nodes TransactionPool
    Checks GW node signature
    Adds to pending pool
end note

note over GW TransactionPool
    Waits for block commit
end note

GW TransactionPool->GW PublicAPI:ReturnTransactionResults
GW PublicAPI->GW ClientSDK:SendTransaction response


# 2. flows/block-creation-before-commit.md, Leader flow

participant ConsensusAlgo
participant ConsensusContext
participant BlockStorage
participant TransactionPool
participant VirtualMachine
participant StateStorage
participant Gossip


ConsensusAlgo-->+BlockStorage:GetBlockHeader
BlockStorage-->-ConsensusAlgo:block header
ConsensusAlgo->+ConsensusContext:RequestCommittee
ConsensusContext->-ConsensusAlgo:ordered committee

note over ConsensusAlgo, ConsensusContext, BlockStorage, TransactionPool, VirtualMachine, StateStorage, Gossip
  Leader node - Ordering Phase
end note

ConsensusAlgo->+ConsensusContext:RequestNewTransactionsBlock
ConsensusContext->+TransactionPool:GetTransactionsForOrdering
note over TransactionPool
  Fetch transctions from pending
  transactions pool
end note 
TransactionPool->+VirtualMachine:TransactionSetPreOrder
note over VirtualMachine
  Verifies signatrues and calls 
  PreOrder smart contarct
end note 
VirtualMachine-->-TransactionPool:valid for ordering
TransactionPool-->-ConsensusContext: transactions set
note over ConsensusContext
  Caches TransactionsBlock
  for validation
end note
ConsensusContext-->-ConsensusAlgo:TransactionsBlock

note over ConsensusAlgo, ConsensusContext, BlockStorage, TransactionPool, VirtualMachine, StateStorage, Gossip
  Leader node - Validation Phase
end note

ConsensusAlgo->+ConsensusContext:RequestNewResultsBlock\n(may be called before complition of the ordering phase)
ConsensusContext->+VirtualMachine:ProcessTransactionSet
note over VirtualMachine
  Executes the transactions
end note 
VirtualMachine-->-ConsensusContext:transaction receipts
ConsensusContext->+StateStorage:GetStateHash
StateStorage-->-ConsensusContext:state hash
ConsensusContext-->-ConsensusAlgo:ResultsBlock
ConsensusAlgo->Gossip:Boradcast message to all other nodes (LeanHelix PrePrepare)


# 3. flows/block-creation-before-commit.md, Non-leader flow

participant Gossip
participant ConsensusAlgo
participant ConsensusContext
participant BlockStorage
participant TransactionPool
participant VirtualMachine
participant StateStorage


ConsensusAlgo-->+BlockStorage:GetBlockHeader
BlockStorage-->-ConsensusAlgo:block header
ConsensusAlgo->+ConsensusContext:RequestCommittee
ConsensusContext->-ConsensusAlgo:ordered committee

note over ConsensusAlgo, ConsensusContext, BlockStorage, TransactionPool, VirtualMachine, StateStorage, Gossip
  Non-leader committee node - Ordering Phase
end note

Gossip->ConsensusAlgo: GossipMessageReceived\n(Lean Helix PrePrepare)
ConsensusAlgo->+ConsensusContext:ValidateTransactionsForOrdering
ConsensusContext->+TransactionPool:ValidateTransactionsForOrdering
TransactionPool->+VirtualMachine:TransactionSetPreOrder
note over VirtualMachine
  Verifies signatrues and calls 
  PreOrder smart contarct
end note 
VirtualMachine-->-TransactionPool:valid for ordering
TransactionPool-->-ConsensusContext: valid
note over ConsensusContext
  Caches TransactionsBlock
  for validation
end note
ConsensusContext-->-ConsensusAlgo:valid

note over ConsensusAlgo, ConsensusContext, BlockStorage, TransactionPool, VirtualMachine, StateStorage, Gossip
  Non-leader committee node - Validation Phase
end note

ConsensusAlgo->+ConsensusContext:ValidateResultsBlock\n(may be called before the complition of the ordering phase)
ConsensusContext->+VirtualMachine:ProcessTransactionSet
note over VirtualMachine
  Executes the transactions
end note 
VirtualMachine-->-ConsensusContext:transaction receipts
ConsensusContext->+StateStorage:GetStateHash
StateStorage-->-ConsensusContext:state hash
note over VirtualMachine
  Compares to received block proposal
end note 
ConsensusContext-->-ConsensusAlgo:valid
ConsensusAlgo->Gossip:Boradcast message to all other nodes


# 4. flows/block-creation-after-commit.md

participant ConsensusAlgo
participant BlockStorage
participant StateStorage
participant TransactionPool
participant GW PublicAPI
participant GW ClientSDK


ConsensusAlgo->BlockStorage:CommitBlock
BlockStorage->+StateStorage:CommitStateDiff
StateStorage-->-BlockStorage:next desired block height
BlockStorage->+TransactionPool:CommitTransactionReceipts
TransactionPool-->-BlockStorage:next desired block height
TransactionPool->GW PublicAPI:ReturnTransactionResults
GW PublicAPI->GW ClientSDK: SendTransaction response


#5. flows/process_call.md

participant VirtualMachine
participant StateStorage
participant ProcessorA
participant ProcessorB
participant CrosschainConnector


VirtualMachine->+StateStorage:Get processor (ReadKeys)
StateStorage-->-VirtualMachine: processor / not found
opt Deploy
    VirtualMachine->StateStorage: DeployService
end
note over VirtualMachine
  allocate execution context
  and batch transient state
end note

loop For each transaction
  note over VirtualMachine
    Prepare transction context
  end note
  VirtualMachine->+ProcessorA:ProcessCall

  ProcessorA->+VirtualMachine:SdkCall(ReadKeys)
  VirtualMachine->+StateStorage:ReadKeys
  StateStorage-->-VirtualMachine:values
  VirtualMachine-->-ProcessorA:values

  ProcessorA->+VirtualMachine:SdkCall(Call contract)
  VirtualMachine->+ProcessorB:ProcessCall
  ProcessorB-->-VirtualMachine:output
  VirtualMachine-->-ProcessorA:output
 
  ProcessorA->+VirtualMachine:SdkCall(CallEthereumContract)
  VirtualMachine->+CrosschainConnector:CallEthereumContract
  CrosschainConnector-->-VirtualMachine:values
  VirtualMachine-->-ProcessorA:values

  ProcessorA-->-VirtualMachine:output

  note over VirtualMachine
    Update batch transient state
  end note
end
note over VirtualMachine
  Prepare combined StateDiff
end note


#6. flows/call-method.md

participant ClientSDK
participant PublicAPI
participant VirtualMachine
participant StateStorage

ClientSDK->PublicAPI:CallMethod
note over PublicAPI
    Basic transaction checks
    Maintains Session Info
end note
PublicAPI->+VirtualMachine:RunLocalMethod
VirtualMachine->+StateStorage:GetLastCommittedBlockInfo
StateStorage->-VirtualMachine:block height, timestamp
note over VirtualMachine
  Checks permissions
  Executes the method
end note 
VirtualMachine-->-PublicAPI:output
PublicAPI->ClientSDK:CallMethod response






#7. ConsumerVC Elected Validators Update
* https://sequencediagram.org/

title ConsumerVC Update ElectedValidators flow

participant VC-ConsensusCtxt
participant VC-VM
participant VC-Crosschain
participant MGMT-CrosschainAPI
participant MGMT-BlockStorage
participant MGMT-VM

note over VC-ConsensusCtxt: BlockProposer \ Validator

VC-ConsensusCtxt -> VC-VM: ProcessTxSet(ProposeMode \ VerifyMode)


activate VC-VM
note over VC-VM: Triggers -> ElectedValidators.Update()
group SdkMgmtGetElectedValidators() #black[ProposeMode \ VerifyMode]
VC-VM -> VC-Crosschain: MGMT.GetBlockHeight(refTime)
activate VC-Crosschain
VC-Crosschain -> VC-Crosschain: getFinality()
note over VC-Crosschain#ffffff:intra-node sync cross vcs\n refTime => finalityTime
VC-Crosschain -> MGMT-CrosschainAPI: GetBlockInfoByTime(finalityTime)
activate MGMT-CrosschainAPI
MGMT-CrosschainAPI -> MGMT-BlockStorage: GetCommittedBlockInfoByTime(finalityTime)
activate MGMT-BlockStorage
MGMT-CrosschainAPI <-- MGMT-BlockStorage: result
deactivate MGMT-BlockStorage
VC-Crosschain <-- MGMT-CrosschainAPI: result
deactivate MGMT-CrosschainAPI
VC-VM <-- VC-Crosschain: result
deactivate VC-Crosschain
note over VC-VM: MgmtBlockHeight:= result.blockHeight

alt ProposeMode
note over VC-VM: Log off-chain data (write to receipt)
	VC-VM -> VC-VM: logProposedMgmtBlockHeight(result)
else VerifyMode
note over VC-VM: Verify query result against logged (read from receipt)
VC-VM ->VC-VM: getProposedMgmtBlockHeight()
VC-VM -> VC-VM: VerifyMgmtBlockHeight(proposed, result)
note over VC-VM: <color:#red>Fail ProcessTxSet if not valid </color>
end

VC-VM -> VC-Crosschain: MgmtCallContract(_ElectedValidators, getElectedValidators, MgmtBlockHeight)
activate VC-Crosschain
VC-Crosschain -> MGMT-CrosschainAPI: CallContract(_ElectedValidators, getElectedValidators, MgmtBlockHeight)
activate MGMT-CrosschainAPI
MGMT-CrosschainAPI -> MGMT-BlockStorage: GetCommittedBlockInfoByHeight(MgmtBlockHeight)
activate MGMT-BlockStorage
MGMT-CrosschainAPI <-- MGMT-BlockStorage: result
deactivate MGMT-BlockStorage
note over MGMT-CrosschainAPI: (blockHeight, blockTimestamp) <- result
MGMT-CrosschainAPI -> MGMT-VM:CallSystemContract(_ElectedValidators,getElectedValidators, blockHeight, blockTimestamp)
activate MGMT-VM
MGMT-CrosschainAPI <-- MGMT-VM: result
deactivate MGMT-VM
VC-Crosschain <-- MGMT-CrosschainAPI: result
deactivate MGMT-CrosschainAPI
VC-VM <-- VC-Crosschain: result
deactivate VC-Crosschain
	VC-VM -> VC-VM: logOffchainData(result)
end

VC-ConsensusCtxt<--VC-VM: ProcessTxSet Result
#alt ProposeMode \ VerifyMode Success
#VC-ConsensusCtxt<--VC-VM: Result
#else VerifyMode Fail
#VC-ConsensusCtxt<--VC-VM:Fail ProcessTxSet if verification fails
#end
deactivate VC-ConsensusCtxt
deactivate VC-VM


#8. ConsumerVC RequestOrderingCommittee Flow

title ConsumerVC RequestOrderingCommittee Flow

participant VC-ConsensusCtxt
participant VC-VM
participant VC-Crosschain
participant MGMT-CrosschainAPI


VC-ConsensusCtxt -> VC-VM: CallSystemContract(_Committee, getOrderedCommittee, now, ProposeMode)
activate VC-VM
note over VC-VM: Retreive the current elected validators record\n(used for committee ordering)
VC-VM -> VC-VM: SDK.CallContract(_ElectedValidators, fetchElectedValidators, now)

alt UpToDate
note over VC-VM: Elected Validators local state record is up to date.

else Expired
note over VC-VM: Elected Validators record has expired.\nFetch new record from ManagementVC.
group SdkMgmtGetElectedValidators(now)
VC-VM -> VC-Crosschain:MGMT.GetBlockHeight(now)
activate VC-Crosschain
VC-Crosschain -> MGMT-CrosschainAPI: GetBlockInfoByTime(finalityTime)
activate MGMT-CrosschainAPI
VC-Crosschain <-- MGMT-CrosschainAPI: result
deactivate MGMT-CrosschainAPI
VC-VM <-- VC-Crosschain:result
deactivate VC-Crosschain
VC-VM -> VC-Crosschain: MgmtCallContract(_ElectedValidators, getElectedValidators, MgmtBlockHeight)
activate VC-Crosschain
VC-Crosschain -> MGMT-CrosschainAPI: CallContract(_ElectedValidators, getElectedValidators, MgmtBlockHeight)
activate MGMT-CrosschainAPI
VC-Crosschain <-- MGMT-CrosschainAPI: result
deactivate MGMT-CrosschainAPI
VC-VM <-- VC-Crosschain:result
deactivate VC-Crosschain
end
end

VC-ConsensusCtxt <-- VC-VM: result
deactivate VC-VM